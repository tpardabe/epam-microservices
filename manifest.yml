apiVersion: v1
kind: Namespace
metadata:
  name: k8s-program
  labels:
    name: k8s-program

---
apiVersion: v1
kind: Service
metadata:
  name: song-service
  namespace: k8s-program
spec:
  type: NodePort
  selector:
    app: SongApp
  ports:
    - port: 8080
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 8080
      # # Optional field
      # # By default and for convenience, the Kubernetes control plane
      # # will allocate a port from a range (default: 30000-32767)
      nodePort: 30000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: song-app
  namespace: k8s-program
  labels:
    app: song
spec:
  replicas: 2
  selector:
    matchLabels:
      app: SongApp
  template:
    metadata:
      labels:
        app: SongApp
    spec:
      containers:
      - name: song-app
        image: song-app:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080





---
apiVersion: v1
kind: Service
metadata:
  name: resource-service
  namespace: k8s-program
spec:
  type: NodePort
  selector:
    app: ResourceApp
  ports:
    - port: 8081
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 8081
      # # Optional field
      # # By default and for convenience, the Kubernetes control plane
      # # will allocate a port from a range (default: 30000-32767)
      nodePort: 30001


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-app
  namespace: k8s-program
  labels:
    app: resource
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ResourceApp
  template:
    metadata:
      labels:
        app: ResourceApp
    spec:
      containers:
      - name: resource-app
        image: resource-app:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8081







---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: k8s-program
  labels:
    app: postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: root


---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-volume
  namespace: k8s-program
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  namespace: k8s-program
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: k8s-program
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.1
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POSTGRES_USER 
              value: postgres
            - name: POSTGRES_PASSWORD
              value: root
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: postgres-pv-claim
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: postgres-pv-claim
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
    #spec:
    #  containers:
    #    - name: postgres
    ##      image: postgres:10.1
    #      imagePullPolicy: "IfNotPresent"
    #      ports:
    #        - containerPort: 5432
    ##      envFrom:
     #       - configMapRef:
     #           name: postgres-config
      #    volumeMounts:
       #     - mountPath: /var/lib/postgresql/data
      #        name: postgredb
      #volumes:
       # - name: postgredb
       #   persistentVolumeClaim:
        #    claimName: postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: k8s-program
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: postgres